@{
    var portfolioId = ViewData["PortfolioId"] as Guid?;
    var gainLossData = ViewBag.GainLossData as List<(DateTime Date, decimal Gain, decimal Loss)>;

    ViewData["Title"] = "Chart";
}

<h2 class="text-center">Gain and Loss for @ViewBag.SecurityName</h2>

<div class="container mt-4">
    <div class="row">
        <div class="col-md-8 offset-md-2">
            <canvas id="gainLossChart" width="800" height="400"></canvas>
        </div>
    </div>
    <div class="row mt-3">
        <div class="col-md-8 offset-md-2">
            <div class="progress">
                @foreach (var data in gainLossData)
                {
                    var total = data.Gain + data.Loss;
                    var gainPercentage = total != 0 ? (data.Gain * 100 / total) : 50;
                    var lossPercentage = total != 0 ? (data.Loss * 100 / total) : 50;

                    <div class="progress-bar bg-success" role="progressbar" style="width: @gainPercentage%;" aria-valuenow="@gainPercentage%" aria-valuemin="0" aria-valuemax="100">Gain: @String.Format("{0:C}", data.Gain)</div>
                    <div class="progress-bar bg-danger" role="progressbar" style="width: @lossPercentage%;" aria-valuenow="@lossPercentage%" aria-valuemin="0" aria-valuemax="100">Loss: @String.Format("{0:C}", data.Loss)</div>
                }
            </div>
        </div>
    </div>
    <div class="row mt-3">
        <div class="col-md-8 offset-md-2">
            <a href="@Url.Action("Index", new {portfolioId = portfolioId})" class="btn btn-secondary"><i class="bi bi-arrow-left"></i> Back to List</a>
        </div>
    </div>
</div>

@section Scripts {
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.7.2/font/bootstrap-icons.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        var gainLossData = @Html.Raw(Json.Serialize(ViewBag.GainLossData));

        var ctx = document.getElementById('gainLossChart').getContext('2d');
        var gainLossChart = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: gainLossData.map(data => data.Date.toLocaleDateString()),
                datasets: [{
                    label: 'Gain',
                    data: gainLossData.map(data => data.Gain),
                    backgroundColor: 'rgba(75, 192, 192, 0.5)',
                    borderColor: 'rgba(75, 192, 192, 1)',
                    borderWidth: 1
                }, {
                    label: 'Loss',
                    data: gainLossData.map(data => data.Loss),
                    backgroundColor: 'rgba(255, 99, 132, 0.5)',
                    borderColor: 'rgba(255, 99, 132, 1)',
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    x: {
                        type: 'time',
                        time: {
                            unit: 'day'
                        }
                    },
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });
    </script>
}
